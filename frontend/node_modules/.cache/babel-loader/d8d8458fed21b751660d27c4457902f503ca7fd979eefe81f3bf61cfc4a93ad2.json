{"ast":null,"code":"var _jsxFileName = \"C:\\\\appproject\\\\agendamento-app\\\\frontend\\\\src\\\\screens\\\\Home.js\",\n  _s = $RefreshSig$();\n// src/screens/Home.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport debounce from 'lodash.debounce';\nimport homeStyles from '../styles/home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [estados, setEstados] = useState([]);\n  const [estadoSelecionado, setEstadoSelecionado] = useState('');\n  const [cidadeDigitada, setCidadeDigitada] = useState('');\n  const [cidadesEncontradas, setCidadesEncontradas] = useState([]);\n  useEffect(() => {\n    // Carregar lista de estados ao montar o componente\n    const carregarEstados = async () => {\n      try {\n        const response = await axios.get('https://servicodados.ibge.gov.br/api/v1/localidades/estados');\n        const estadosData = response.data.map(estado => estado.sigla);\n        setEstados(estadosData);\n      } catch (error) {\n        console.error('Erro ao carregar estados:', error);\n      }\n    };\n    carregarEstados();\n  }, []);\n  const buscarCidades = async () => {\n    try {\n      if (estadoSelecionado.trim() !== '' && cidadeDigitada.trim() !== '') {\n        const response = await axios.get(`https://servicodados.ibge.gov.br/api/v1/localidades/municipios`, {\n          params: {\n            uf: estadoSelecionado,\n            nome: cidadeDigitada,\n            limit: 10\n          }\n        });\n        console.log(response);\n        const cidades = response.data.map(cidade => ({\n          nome: cidade.nome,\n          estado: cidade.microrregiao.mesorregiao.UF.sigla\n        }));\n        setCidadesEncontradas(cidades);\n      } else {\n        // Limpar a lista quando a entrada está vazia\n        setCidadesEncontradas([]);\n      }\n    } catch (error) {\n      console.error('Erro ao buscar cidades:', error);\n    }\n  };\n  const buscarCidadesDebounced = debounce(buscarCidades, 300);\n  useEffect(() => {\n    buscarCidadesDebounced();\n  }, [estadoSelecionado, cidadeDigitada]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: homeStyles.body,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: homeStyles.searchForm,\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        className: homeStyles.select,\n        value: estadoSelecionado,\n        onChange: e => setEstadoSelecionado(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Selecione o Estado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), estados.map((estado, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: estado,\n          children: estado\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: homeStyles.input,\n        placeholder: \"Nome da Cidade\",\n        value: cidadeDigitada,\n        onChange: e => setCidadeDigitada(e.target.value),\n        disabled: !estadoSelecionado // Desabilitar o input até que um estado seja selecionado\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: cidadesEncontradas.map((cidade, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: `${cidade.nome}, ${cidade.estado}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"uhRBSMjCa6gVfev/LoXeKFYA/4E=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","axios","debounce","homeStyles","jsxDEV","_jsxDEV","Home","_s","estados","setEstados","estadoSelecionado","setEstadoSelecionado","cidadeDigitada","setCidadeDigitada","cidadesEncontradas","setCidadesEncontradas","carregarEstados","response","get","estadosData","data","map","estado","sigla","error","console","buscarCidades","trim","params","uf","nome","limit","log","cidades","cidade","microrregiao","mesorregiao","UF","buscarCidadesDebounced","className","body","children","searchForm","select","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","index","type","input","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/appproject/agendamento-app/frontend/src/screens/Home.js"],"sourcesContent":["// src/screens/Home.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport debounce from 'lodash.debounce';\r\nimport homeStyles from '../styles/home.css';\r\n\r\nconst Home = () => {\r\n  const [estados, setEstados] = useState([]);\r\n  const [estadoSelecionado, setEstadoSelecionado] = useState('');\r\n  const [cidadeDigitada, setCidadeDigitada] = useState('');\r\n  const [cidadesEncontradas, setCidadesEncontradas] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Carregar lista de estados ao montar o componente\r\n    const carregarEstados = async () => {\r\n      try {\r\n        const response = await axios.get('https://servicodados.ibge.gov.br/api/v1/localidades/estados');\r\n        const estadosData = response.data.map((estado) => estado.sigla);\r\n        setEstados(estadosData);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar estados:', error);\r\n      }\r\n    };\r\n\r\n    carregarEstados();\r\n  }, []);\r\n\r\n  const buscarCidades = async () => {\r\n    try {\r\n      if (estadoSelecionado.trim() !== '' && cidadeDigitada.trim() !== '') {\r\n        const response = await axios.get(`https://servicodados.ibge.gov.br/api/v1/localidades/municipios`, {\r\n          params: {\r\n            uf: estadoSelecionado,\r\n            nome: cidadeDigitada,\r\n            limit: 10\r\n          }\r\n        });\r\n\r\n        console.log(response);\r\n\r\n        const cidades = response.data.map((cidade) => ({\r\n          nome: cidade.nome,\r\n          estado: cidade.microrregiao.mesorregiao.UF.sigla\r\n        }));\r\n\r\n        setCidadesEncontradas(cidades);\r\n      } else {\r\n        // Limpar a lista quando a entrada está vazia\r\n        setCidadesEncontradas([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao buscar cidades:', error);\r\n    }\r\n  };\r\n\r\n  const buscarCidadesDebounced = debounce(buscarCidades, 300);\r\n\r\n  useEffect(() => {\r\n    buscarCidadesDebounced();\r\n  }, [estadoSelecionado, cidadeDigitada]);\r\n\r\n  return (\r\n    <div className={homeStyles.body}>\r\n      {/* ... (restante do código) */}\r\n      <div className={homeStyles.searchForm}>\r\n        {/* Dropdown para selecionar o estado */}\r\n        <select\r\n          className={homeStyles.select}\r\n          value={estadoSelecionado}\r\n          onChange={(e) => setEstadoSelecionado(e.target.value)}\r\n        >\r\n          <option value=\"\">Selecione o Estado</option>\r\n          {estados.map((estado, index) => (\r\n            <option key={index} value={estado}>\r\n              {estado}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        {/* Input para a cidade */}\r\n        <input\r\n          type=\"text\"\r\n          className={homeStyles.input}\r\n          placeholder=\"Nome da Cidade\"\r\n          value={cidadeDigitada}\r\n          onChange={(e) => setCidadeDigitada(e.target.value)}\r\n          disabled={!estadoSelecionado} // Desabilitar o input até que um estado seja selecionado\r\n        />\r\n        <ul>\r\n          {cidadesEncontradas.map((cidade, index) => (\r\n            <li key={index}>{`${cidade.nome}, ${cidade.estado}`}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}