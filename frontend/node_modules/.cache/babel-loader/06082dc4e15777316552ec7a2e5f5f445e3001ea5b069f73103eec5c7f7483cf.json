{"ast":null,"code":"var _jsxFileName = \"C:\\\\appproject\\\\agendamento-app\\\\frontend\\\\src\\\\screens\\\\Horarios.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HorariosPage = ({\n  cidadeSelecionada,\n  estadoSelecionado\n}) => {\n  _s();\n  const [horariosDisponiveis, setHorariosDisponiveis] = useState([]);\n  useEffect(() => {\n    const carregarHorariosDisponiveis = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/horarios', {\n          params: {\n            estado: estadoSelecionado,\n            cidade: cidadeSelecionada\n          }\n        });\n        setHorariosDisponiveis(response.data);\n      } catch (error) {\n        console.error('Erro ao carregar horários disponíveis:', error);\n      }\n    };\n    if (cidadeSelecionada && estadoSelecionado) {\n      carregarHorariosDisponiveis();\n    } else {\n      setHorariosDisponiveis([]);\n    }\n  }, [cidadeSelecionada, estadoSelecionado]);\n\n  // Agrupa os horários disponíveis por dia\n  const horariosPorDia = {};\n  horariosDisponiveis.forEach(horario => {\n    const data = new Date(horario.data).toLocaleDateString('pt-BR');\n    if (!horariosPorDia[data]) {\n      horariosPorDia[data] = [];\n    }\n    horariosPorDia[data].push(horario);\n  });\n\n  // Função para formatar a data no formato dd/mm e o horário no formato hh:mm\n  const formatarDataHora = dataHora => {\n    const data = new Date(dataHora);\n    const dia = data.getDate().toString().padStart(2, '0');\n    const mes = (data.getMonth() + 1).toString().padStart(2, '0');\n    const hora = data.getHours().toString().padStart(2, '0');\n    const minutos = data.getMinutes().toString().padStart(2, '0');\n    return `${dia}/${mes} - ${hora}:${minutos}`;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Object.keys(horariosPorDia).map((dia, index) => {\n      const horariosDoDia = horariosPorDia[dia];\n      const horarioEncontrado = horariosDoDia.find(horario => new Date(horario.data).getHours() === hora);\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        children: horarioEncontrado ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => console.log('Horário selecionado:', horarioEncontrado.hora),\n          children: formatarDataHora(horarioEncontrado.data)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(HorariosPage, \"3qUwd/CofBhDKhcjNFLCT45SEIs=\");\n_c = HorariosPage;\nexport default HorariosPage;\nvar _c;\n$RefreshReg$(_c, \"HorariosPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","HorariosPage","cidadeSelecionada","estadoSelecionado","_s","horariosDisponiveis","setHorariosDisponiveis","carregarHorariosDisponiveis","response","get","params","estado","cidade","data","error","console","horariosPorDia","forEach","horario","Date","toLocaleDateString","push","formatarDataHora","dataHora","dia","getDate","toString","padStart","mes","getMonth","hora","getHours","minutos","getMinutes","children","Object","keys","map","index","horariosDoDia","horarioEncontrado","find","onClick","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/appproject/agendamento-app/frontend/src/screens/Horarios.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst HorariosPage = ({ cidadeSelecionada, estadoSelecionado }) => {\r\n\r\n  const [horariosDisponiveis, setHorariosDisponiveis] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const carregarHorariosDisponiveis = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3001/horarios', {\r\n          params: {\r\n            estado: estadoSelecionado,\r\n            cidade: cidadeSelecionada,\r\n          },\r\n        });\r\n        setHorariosDisponiveis(response.data);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar horários disponíveis:', error);\r\n      }\r\n    };\r\n\r\n    if (cidadeSelecionada && estadoSelecionado) {\r\n      carregarHorariosDisponiveis();\r\n    } else {\r\n      setHorariosDisponiveis([]);\r\n    }\r\n  }, [cidadeSelecionada, estadoSelecionado]);\r\n\r\n  // Agrupa os horários disponíveis por dia\r\n  const horariosPorDia = {};\r\n  horariosDisponiveis.forEach((horario) => {\r\n    const data = new Date(horario.data).toLocaleDateString('pt-BR');\r\n    if (!horariosPorDia[data]) {\r\n      horariosPorDia[data] = [];\r\n    }\r\n    horariosPorDia[data].push(horario);\r\n  });\r\n\r\n  // Função para formatar a data no formato dd/mm e o horário no formato hh:mm\r\n  const formatarDataHora = (dataHora) => {\r\n    const data = new Date(dataHora);\r\n    const dia = data.getDate().toString().padStart(2, '0');\r\n    const mes = (data.getMonth() + 1).toString().padStart(2, '0');\r\n    const hora = data.getHours().toString().padStart(2, '0');\r\n    const minutos = data.getMinutes().toString().padStart(2, '0');\r\n    return `${dia}/${mes} - ${hora}:${minutos}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {Object.keys(horariosPorDia).map((dia, index) => {\r\n        const horariosDoDia = horariosPorDia[dia];\r\n        const horarioEncontrado = horariosDoDia.find(\r\n          (horario) => new Date(horario.data).getHours() === hora\r\n        );\r\n        return (\r\n          <td key={index}>\r\n            {horarioEncontrado ? (\r\n              <button onClick={() => console.log('Horário selecionado:', horarioEncontrado.hora)}>\r\n                {formatarDataHora(horarioEncontrado.data)}\r\n              </button>\r\n            ) : (\r\n              <span>-</span>\r\n            )}\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HorariosPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}